# -*- coding: utf-8 -*-
"""streamlit_app.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1RlASfNeYkLBJnwuJHgnIumXB_9f9ovKY
"""

!pip install streamlit
!pip install pyngrok

import streamlit as st
import pandas as pd
import numpy as np
import seaborn as sns
import matplotlib.pyplot as plt

from sklearn.preprocessing import StandardScaler
from sklearn.decomposition import PCA
from sklearn.cluster import KMeans, DBSCAN, AgglomerativeClustering
from sklearn.mixture import GaussianMixture

from google.colab import files
uploaded = files.upload()

# STEP 4: Load Excel data (replace filename if needed)
df = pd.read_excel("marketing_campaign1.xlsx")

st.set_page_config(page_title="Customer Segmentation App", layout="centered")

st.title("ðŸ§  Customer Segmentation Using Clustering")
st.markdown("Upload an Excel file and choose a clustering algorithm to visualize customer groups.")

# File upload
uploaded_file = st.file_uploader("Upload your Excel file", type=["xlsx"])

if uploaded_file is not None:
    # Read the Excel file into a pandas DataFrame
    df = pd.read_excel(uploaded_file)

df_cleaned = df.drop(columns=["ID", "Dt_Customer", "Z_CostContact", "Z_Revenue"], errors="ignore")
df_cleaned = df_cleaned.dropna()
df_encoded = pd.get_dummies(df_cleaned, drop_first=True)

scaler = StandardScaler()
X_scaled = scaler.fit_transform(df_encoded)

pca = PCA(n_components=2)
X_pca = pca.fit_transform(X_scaled)

algo = st.selectbox("Select Clustering Algorithm", ["KMeans", "DBSCAN", "Agglomerative", "GMM"])

if algo == "KMeans":
   k = st.slider("Number of Clusters", 2, 10, 4)
   model = KMeans(n_clusters=k, random_state=42)
   labels = model.fit_predict(X_scaled)

elif algo == "DBSCAN":
  eps = st.slider("EPS (Neighborhood Radius)", 0.1, 5.0, 2.0)
  min_samples = st.slider("Minimum Samples", 1, 10, 5)
  model = DBSCAN(eps=eps, min_samples=min_samples)
  labels = model.fit_predict(X_scaled)

elif algo == "Agglomerative":
     k = st.slider("Number of Clusters", 2, 10, 4)
     model = AgglomerativeClustering(n_clusters=k)
     labels = model.fit_predict(X_scaled)

elif algo == "GMM":
     k = st.slider("Number of Components", 2, 10, 4)
     model = GaussianMixture(n_components=k, random_state=42)
     labels = model.fit_predict(X_scaled)

fig, ax = plt.subplots()
sns.scatterplot(x=X_pca[:, 0], y=X_pca[:, 1], hue=labels, palette='Set1', ax=ax, legend=False)
plt.xlabel("PCA 1")
plt.ylabel("PCA 2")
plt.title(f"{algo} Clustering")
st.pyplot(fig)